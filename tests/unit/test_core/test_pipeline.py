from pestifer.core.pipeline import *
from pestifer.core.artifacts import *
import unittest

class TestPipeline(unittest.TestCase):
    def test_pipeline_initialization(self):
        pipeline = PipelineContext()
        self.assertIsInstance(pipeline, PipelineContext)

    def test_register_artifact(self):
        Path('test.pdb').write_text('HEADER    TEST PDB FILE\nEND')
        pipeline = PipelineContext()
        pipeline.register('test.pdb', key='pdb', requestor='I am the maker', artifact_type=PDBFileArtifact)
        added_artifact = pipeline.get_current_artifact('pdb')
        self.assertIsInstance(added_artifact, Artifact)
        self.assertIsInstance(added_artifact, PDBFileArtifact)
        self.assertEqual(added_artifact.key, 'pdb')
        self.assertEqual(added_artifact.data, 'test')
        self.assertEqual(added_artifact.path, Path('test.pdb'))
        self.assertEqual(added_artifact.produced_by, 'I am the maker')
        returned_artifact_data = pipeline.get_current_artifact_data('pdb')
        self.assertIsNotNone(returned_artifact_data)
        self.assertEqual(returned_artifact_data, 'test')
        a = pipeline.get_current_artifact('pdb')
        self.assertEqual(a, added_artifact)
        a.path.unlink()
        self.assertFalse(a.exists(), "Artifact file should be removed after test.")

    def test_register_stateartifact_from_artifacts(self):
        Path('1gc1.pdb').write_text('HEADER    TEST PDB FILE\nEND')
        Path('1gc1.psf').write_text('PSF FILE CONTENT\nEND')
        Path('1gc1.coor').write_text('COOR FILE CONTENT\nEND')
        Path('1gc1.xsc').write_text('XSC FILE CONTENT\nEND')
        Path('1gc1.vel').write_text('VEL FILE CONTENT\nEND')
        s = dict(pdb=PDBFileArtifact('1gc1.pdb'), psf=PSFFileArtifact('1gc1.psf'), coor=NAMDCoorFileArtifact('1gc1.coor'), xsc=NAMDXscFileArtifact('1gc1.xsc'), vel=NAMDVelFileArtifact('1gc1.vel'))
        pipeline = PipelineContext()
        pipeline.register(s, key='state', requestor='State maker', artifact_type=StateArtifacts)
        s = pipeline.get_current_artifact('state')
        self.assertIsInstance(s, StateArtifacts)
        self.assertIsInstance(s.pdb, PDBFileArtifact)
        self.assertIn('state', pipeline.head)
        self.assertEqual(s.produced_by, 'State maker')
        self.assertEqual(s.psf.produced_by, 'State maker')
        s.psf.path.unlink()
        s.pdb.path.unlink()
        s.coor.path.unlink()
        s.xsc.path.unlink()
        s.vel.path.unlink()
        self.assertFalse(s.psf.exists(), "PSF file should be removed after test.")
        self.assertFalse(s.pdb.exists(), "PDB file should be removed after test.")
        self.assertFalse(s.coor.exists(), "COOR file should be removed after test.")
        self.assertFalse(s.xsc.exists(), "XSC file should be removed after test.")
        self.assertFalse(s.vel.exists(), "VEL file should be removed after test.")

    def test_register_stateartifact_from_strings(self):
        Path('1gc1.pdb').write_text('HEADER    TEST PDB FILE\nEND')
        Path('1gc1.psf').write_text('PSF FILE CONTENT\nEND')
        Path('1gc1.coor').write_text('COOR FILE CONTENT\nEND')
        Path('1gc1.xsc').write_text('XSC FILE CONTENT\nEND')
        Path('1gc1.vel').write_text('VEL FILE CONTENT\nEND')
        s = dict(pdb='1gc1.pdb', psf='1gc1.psf', coor='1gc1.coor', xsc='1gc1.xsc', vel='1gc1.vel')
        pipeline = PipelineContext()
        pipeline.register(s, key='state', requestor='State maker', artifact_type=StateArtifacts)
        s = pipeline.get_current_artifact('state')
        self.assertIsInstance(s, StateArtifacts)
        self.assertIsInstance(s.pdb, PDBFileArtifact)
        self.assertIn('state', pipeline.head)
        self.assertEqual(s.produced_by, 'State maker')
        self.assertEqual(s.psf.produced_by, 'State maker')
        s.psf.path.unlink()
        s.pdb.path.unlink()
        s.coor.path.unlink()
        s.xsc.path.unlink()
        s.vel.path.unlink()
        self.assertFalse(s.psf.exists(), "PSF file should be removed after test.")
        self.assertFalse(s.pdb.exists(), "PDB file should be removed after test.")
        self.assertFalse(s.coor.exists(), "COOR file should be removed after test.")
        self.assertFalse(s.xsc.exists(), "XSC file should be removed after test.")
        self.assertFalse(s.vel.exists(), "VEL file should be removed after test.")

    def test_register_multiple_stateartifacts(self):
        Path('1gc1.pdb').write_text('HEADER    TEST PDB FILE\nEND')
        Path('1gc1.psf').write_text('PSF FILE CONTENT\nEND')
        Path('1gc1.coor').write_text('COOR FILE CONTENT\nEND')
        Path('1gc1.xsc').write_text('XSC FILE CONTENT\nEND')
        Path('1gc1.vel').write_text('VEL FILE CONTENT\nEND')
        s1 = dict(pdb='1gc1.pdb', psf='1gc1.psf', coor='1gc1.coor', xsc='1gc1.xsc', vel='1gc1.vel')
        Path('2gc2.pdb').write_text('HEADER    TEST PDB FILE 2\nEND')
        Path('2gc2.psf').write_text('PSF FILE CONTENT 2\nEND')
        Path('2gc2.coor').write_text('COOR FILE CONTENT 2\nEND')
        Path('2gc2.xsc').write_text('XSC FILE CONTENT 2\nEND')
        Path('2gc2.vel').write_text('VEL FILE CONTENT 2\nEND')
        s2 = dict(pdb='2gc2.pdb', psf='2gc2.psf', coor='2gc2.coor', xsc='2gc2.xsc', vel='2gc2.vel')
        pipeline = PipelineContext()
        pipeline.register(s1, key='state', requestor='State maker 1', artifact_type=StateArtifacts)
        pipeline.register(s2, key='state', requestor='State maker 2', artifact_type=StateArtifacts)
        s = pipeline.get_current_artifact('state')
        self.assertIsInstance(s, StateArtifacts)
        self.assertIsInstance(s.pdb, PDBFileArtifact)
        self.assertIn('state', pipeline.head)
        self.assertEqual(s.produced_by, 'State maker 2')
        self.assertEqual(s.psf.produced_by, 'State maker 2')
        self.assertEqual(len(pipeline.history), 1)
        self.assertEqual(pipeline.history[0].produced_by, 'State maker 1')
        s.psf.path.unlink()
        s.pdb.path.unlink()
        s.coor.path.unlink()
        s.xsc.path.unlink()
        s.vel.path.unlink()
        self.assertFalse(s.psf.exists(), "PSF file should be removed after test.")
        self.assertFalse(s.pdb.exists(), "PDB file should be removed after test.")
        self.assertFalse(s.coor.exists(), "COOR file should be removed after test.")
        self.assertFalse(s.xsc.exists(), "XSC file should be removed after test.")
        self.assertFalse(s.vel.exists(), "VEL file should be removed after test.")
        s2 = pipeline.history[0]
        s2.psf.path.unlink()
        s2.pdb.path.unlink()
        s2.coor.path.unlink()
        s2.xsc.path.unlink()
        s2.vel.path.unlink()
        self.assertFalse(s2.psf.exists(), "PSF file should be removed after test.")
        self.assertFalse(s2.pdb.exists(), "PDB file should be removed after test.")
        self.assertFalse(s2.coor.exists(), "COOR file should be removed after test.")
        self.assertFalse(s2.xsc.exists(), "XSC file should be removed after test.")
        self.assertFalse(s2.vel.exists(), "VEL file should be removed after test.")

    def test_pipeline_history(self):
        pipeline = PipelineContext()
        pipeline.register('1gc1', key='pdb', requestor='First maker', artifact_type=PDBFileArtifact)
        pipeline.register('2gc2', key='pdb', requestor='Second maker', artifact_type=PDBFileArtifact)
        
        artifact1 = PDBFileArtifact('1gc1').stamp('First maker')
        artifact2 = PDBFileArtifact('2gc2').stamp('Second maker')
        self.assertIn('pdb', pipeline.head)
        self.assertEqual(len(pipeline.history), 1)
        self.assertEqual(pipeline.history[0], artifact1)
        self.assertEqual(pipeline.get_current_artifact('pdb'), artifact2)

    def test_get_current_artifact_series(self):
        pipeline = PipelineContext()
        pipeline.register('1gc1', key='pdb_series', requestor='First maker', artifact_type=PDBFileArtifact)
        pipeline.register('2gc2', key='pdb_series', requestor='Second maker', artifact_type=PDBFileArtifact)
        artifact1 = PDBFileArtifact('1gc1').stamp('First maker')
        artifact1.key = 'pdb_series'
        artifact2 = PDBFileArtifact('2gc2').stamp('Second maker')
        artifact2.key = 'pdb_series'
        self.assertEqual(len(pipeline.head), 1)
        self.assertEqual(len(pipeline.history), 1)
        self.assertEqual(pipeline.get_current_artifact('pdb_series'), artifact2)
        self.assertEqual(pipeline.history[0], artifact1)
        self.assertEqual(pipeline.history[0].key, 'pdb_series')
        series = pipeline.get_artifact_series_by_key('pdb_series')
        self.assertIsInstance(series, ArtifactList)
        self.assertIsInstance(series, FileArtifactList)
        self.assertEqual(len(series), 2)
        self.assertIn(artifact1, series)
        self.assertIn(artifact2, series)

    def test_stash_current_artifact(self):
        pipeline = PipelineContext()
        pipeline.register('1gc1', key='pdb', requestor='First maker', artifact_type=PDBFileArtifact)
        self.assertIn('pdb', pipeline.head)
        pipeline.stash('pdb')
        self.assertNotIn('pdb', pipeline.head)
        self.assertEqual(len(pipeline.history), 1)

    def test_artifact_list_persistence(self):
        pipeline = PipelineContext()
        artifact1 = PDBFileArtifact('1gc1').stamp('First maker')
        artifact2 = PDBFileArtifact('2gc2').stamp('Second maker')
        artifact_list = ArtifactList([artifact1, artifact2])
        pipeline.register(artifact_list, key='pdb_list', requestor='List maker', artifact_type=ArtifactList)
        self.assertIn('pdb_list', pipeline.head)
        retrieved_list = pipeline.get_current_artifact('pdb_list')
        self.assertIsInstance(retrieved_list, ArtifactList)
        self.assertEqual(len(retrieved_list), 2)
        self.assertIn(artifact1, retrieved_list)
        self.assertIn(artifact2, retrieved_list)
        artifact3 = PDBFileArtifact('3gc3').stamp('Third maker')
        retrieved_list.append(artifact3)
        self.assertEqual(artifact3.produced_by, 'Third maker')
        retrieved_list = pipeline.get_current_artifact('pdb_list')
        self.assertEqual(len(retrieved_list), 3)
